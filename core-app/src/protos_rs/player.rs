// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Player {
    #[prost(string, tag = "1")]
    pub user_name: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub user_id: i32,
    #[prost(string, tag = "3")]
    pub country: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub action: ::core::option::Option<super::game_state::Action>,
    #[prost(int32, tag = "5")]
    pub bank: i32,
    #[prost(message, optional, tag = "6")]
    pub cards: ::core::option::Option<super::card::CardPair>,
    #[prost(int32, tag = "7")]
    pub bet_in_current_seed: i32,
    #[prost(enumeration = "PlayerStatus", tag = "8")]
    pub status: i32,
    #[prost(bool, tag = "9")]
    pub is_bot: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayerStatus {
    WaitingForPlayers = 0,
    SitOut = 1,
    Ready = 2,
    Disconnected = 3,
    Eliminated = 4,
}
impl PlayerStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PlayerStatus::WaitingForPlayers => "WaitingForPlayers",
            PlayerStatus::SitOut => "SitOut",
            PlayerStatus::Ready => "Ready",
            PlayerStatus::Disconnected => "Disconnected",
            PlayerStatus::Eliminated => "Eliminated",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WaitingForPlayers" => Some(Self::WaitingForPlayers),
            "SitOut" => Some(Self::SitOut),
            "Ready" => Some(Self::Ready),
            "Disconnected" => Some(Self::Disconnected),
            "Eliminated" => Some(Self::Eliminated),
            _ => None,
        }
    }
}

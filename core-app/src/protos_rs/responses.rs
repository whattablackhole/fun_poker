// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartGameResponse {
    #[prost(int32, tag = "1")]
    pub lobby_id: i32,
    #[prost(int32, tag = "2")]
    pub game_started_delay: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResponseMessage {
    #[prost(enumeration = "ResponseMessageType", tag = "1")]
    pub payload_type: i32,
    #[prost(bytes = "vec", tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResponseMessageType {
    StartGame = 0,
    ClientState = 1,
}
impl ResponseMessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ResponseMessageType::StartGame => "StartGame",
            ResponseMessageType::ClientState => "ClientState",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "StartGame" => Some(Self::StartGame),
            "ClientState" => Some(Self::ClientState),
            _ => None,
        }
    }
}

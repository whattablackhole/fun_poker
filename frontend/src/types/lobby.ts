// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "lobby.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Lobby
 */
export interface Lobby {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 author_id = 3;
     */
    authorId: number;
    /**
     * @generated from protobuf field: int32 players_registered = 4;
     */
    playersRegistered: number;
    /**
     * @generated from protobuf field: GameType game_type = 5;
     */
    gameType: GameType;
    /**
     * @generated from protobuf field: GameName game_name = 6;
     */
    gameName: GameName;
}
/**
 * @generated from protobuf message LobbyList
 */
export interface LobbyList {
    /**
     * @generated from protobuf field: repeated Lobby list = 1;
     */
    list: Lobby[];
}
/**
 * @generated from protobuf enum GameName
 */
export enum GameName {
    /**
     * @generated from protobuf enum value: Holdem = 0;
     */
    Holdem = 0
}
/**
 * @generated from protobuf enum GameType
 */
export enum GameType {
    /**
     * @generated from protobuf enum value: Tournament = 0;
     */
    Tournament = 0,
    /**
     * @generated from protobuf enum value: Cash = 1;
     */
    Cash = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Lobby$Type extends MessageType<Lobby> {
    constructor() {
        super("Lobby", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "author_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "players_registered", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "game_type", kind: "enum", T: () => ["GameType", GameType] },
            { no: 6, name: "game_name", kind: "enum", T: () => ["GameName", GameName] }
        ]);
    }
    create(value?: PartialMessage<Lobby>): Lobby {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.authorId = 0;
        message.playersRegistered = 0;
        message.gameType = 0;
        message.gameName = 0;
        if (value !== undefined)
            reflectionMergePartial<Lobby>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Lobby): Lobby {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 author_id */ 3:
                    message.authorId = reader.int32();
                    break;
                case /* int32 players_registered */ 4:
                    message.playersRegistered = reader.int32();
                    break;
                case /* GameType game_type */ 5:
                    message.gameType = reader.int32();
                    break;
                case /* GameName game_name */ 6:
                    message.gameName = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Lobby, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 author_id = 3; */
        if (message.authorId !== 0)
            writer.tag(3, WireType.Varint).int32(message.authorId);
        /* int32 players_registered = 4; */
        if (message.playersRegistered !== 0)
            writer.tag(4, WireType.Varint).int32(message.playersRegistered);
        /* GameType game_type = 5; */
        if (message.gameType !== 0)
            writer.tag(5, WireType.Varint).int32(message.gameType);
        /* GameName game_name = 6; */
        if (message.gameName !== 0)
            writer.tag(6, WireType.Varint).int32(message.gameName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Lobby
 */
export const Lobby = new Lobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LobbyList$Type extends MessageType<LobbyList> {
    constructor() {
        super("LobbyList", [
            { no: 1, name: "list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Lobby }
        ]);
    }
    create(value?: PartialMessage<LobbyList>): LobbyList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<LobbyList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LobbyList): LobbyList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Lobby list */ 1:
                    message.list.push(Lobby.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LobbyList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Lobby list = 1; */
        for (let i = 0; i < message.list.length; i++)
            Lobby.internalBinaryWrite(message.list[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message LobbyList
 */
export const LobbyList = new LobbyList$Type();

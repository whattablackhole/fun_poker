// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "responses.proto" (package "responses", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message responses.StartGameResponse
 */
export interface StartGameResponse {
    /**
     * @generated from protobuf field: int32 lobby_id = 1;
     */
    lobbyId: number;
    /**
     * @generated from protobuf field: int32 game_started_delay = 2;
     */
    gameStartedDelay: number;
}
/**
 * @generated from protobuf message responses.ResponseMessage
 */
export interface ResponseMessage {
    /**
     * @generated from protobuf field: responses.ResponseMessageType payload_type = 1;
     */
    payloadType: ResponseMessageType;
    /**
     * @generated from protobuf field: bytes payload = 2;
     */
    payload: Uint8Array;
}
/**
 * @generated from protobuf enum responses.ResponseMessageType
 */
export enum ResponseMessageType {
    /**
     * @generated from protobuf enum value: StartGame = 0;
     */
    StartGame = 0,
    /**
     * @generated from protobuf enum value: ClientState = 1;
     */
    ClientState = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class StartGameResponse$Type extends MessageType<StartGameResponse> {
    constructor() {
        super("responses.StartGameResponse", [
            { no: 1, name: "lobby_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "game_started_delay", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartGameResponse>): StartGameResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lobbyId = 0;
        message.gameStartedDelay = 0;
        if (value !== undefined)
            reflectionMergePartial<StartGameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartGameResponse): StartGameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lobby_id */ 1:
                    message.lobbyId = reader.int32();
                    break;
                case /* int32 game_started_delay */ 2:
                    message.gameStartedDelay = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartGameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lobby_id = 1; */
        if (message.lobbyId !== 0)
            writer.tag(1, WireType.Varint).int32(message.lobbyId);
        /* int32 game_started_delay = 2; */
        if (message.gameStartedDelay !== 0)
            writer.tag(2, WireType.Varint).int32(message.gameStartedDelay);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message responses.StartGameResponse
 */
export const StartGameResponse = new StartGameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseMessage$Type extends MessageType<ResponseMessage> {
    constructor() {
        super("responses.ResponseMessage", [
            { no: 1, name: "payload_type", kind: "enum", T: () => ["responses.ResponseMessageType", ResponseMessageType] },
            { no: 2, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseMessage>): ResponseMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payloadType = 0;
        message.payload = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ResponseMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseMessage): ResponseMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* responses.ResponseMessageType payload_type */ 1:
                    message.payloadType = reader.int32();
                    break;
                case /* bytes payload */ 2:
                    message.payload = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* responses.ResponseMessageType payload_type = 1; */
        if (message.payloadType !== 0)
            writer.tag(1, WireType.Varint).int32(message.payloadType);
        /* bytes payload = 2; */
        if (message.payload.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message responses.ResponseMessage
 */
export const ResponseMessage = new ResponseMessage$Type();

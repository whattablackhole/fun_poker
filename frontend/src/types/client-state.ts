// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "client-state.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CardPair } from "./card";
import { Card } from "./card";
/**
 * @generated from protobuf message Street
 */
export interface Street {
    /**
     * @generated from protobuf field: StreetStatus street_status = 1;
     */
    streetStatus: StreetStatus;
    /**
     * @generated from protobuf field: repeated Card cards = 2;
     */
    cards: Card[];
}
/**
 * @generated from protobuf message ClientState
 */
export interface ClientState {
    /**
     * @generated from protobuf field: int32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: CardPair cards = 2;
     */
    cards?: CardPair;
    /**
     * @generated from protobuf field: int32 next_player_id = 3;
     */
    nextPlayerId: number;
    /**
     * @generated from protobuf field: int32 lobby_id = 4;
     */
    lobbyId: number;
    /**
     * @generated from protobuf field: Street street = 5;
     */
    street?: Street;
    /**
     * @generated from protobuf field: GameStatus game_status = 6;
     */
    gameStatus: GameStatus;
}
/**
 * @generated from protobuf enum StreetStatus
 */
export enum StreetStatus {
    /**
     * @generated from protobuf enum value: Preflop = 0;
     */
    Preflop = 0,
    /**
     * @generated from protobuf enum value: Flop = 1;
     */
    Flop = 1,
    /**
     * @generated from protobuf enum value: Turn = 2;
     */
    Turn = 2,
    /**
     * @generated from protobuf enum value: River = 3;
     */
    River = 3
}
/**
 * @generated from protobuf enum GameStatus
 */
export enum GameStatus {
    /**
     * @generated from protobuf enum value: Pause = 0;
     */
    Pause = 0,
    /**
     * @generated from protobuf enum value: None = 1;
     */
    None = 1,
    /**
     * @generated from protobuf enum value: Active = 2;
     */
    Active = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Street$Type extends MessageType<Street> {
    constructor() {
        super("Street", [
            { no: 1, name: "street_status", kind: "enum", T: () => ["StreetStatus", StreetStatus] },
            { no: 2, name: "cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Card }
        ]);
    }
    create(value?: PartialMessage<Street>): Street {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streetStatus = 0;
        message.cards = [];
        if (value !== undefined)
            reflectionMergePartial<Street>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Street): Street {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* StreetStatus street_status */ 1:
                    message.streetStatus = reader.int32();
                    break;
                case /* repeated Card cards */ 2:
                    message.cards.push(Card.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Street, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* StreetStatus street_status = 1; */
        if (message.streetStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.streetStatus);
        /* repeated Card cards = 2; */
        for (let i = 0; i < message.cards.length; i++)
            Card.internalBinaryWrite(message.cards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Street
 */
export const Street = new Street$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientState$Type extends MessageType<ClientState> {
    constructor() {
        super("ClientState", [
            { no: 1, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cards", kind: "message", T: () => CardPair },
            { no: 3, name: "next_player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "lobby_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "street", kind: "message", T: () => Street },
            { no: 6, name: "game_status", kind: "enum", T: () => ["GameStatus", GameStatus] }
        ]);
    }
    create(value?: PartialMessage<ClientState>): ClientState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerId = 0;
        message.nextPlayerId = 0;
        message.lobbyId = 0;
        message.gameStatus = 0;
        if (value !== undefined)
            reflectionMergePartial<ClientState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientState): ClientState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_id */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* CardPair cards */ 2:
                    message.cards = CardPair.internalBinaryRead(reader, reader.uint32(), options, message.cards);
                    break;
                case /* int32 next_player_id */ 3:
                    message.nextPlayerId = reader.int32();
                    break;
                case /* int32 lobby_id */ 4:
                    message.lobbyId = reader.int32();
                    break;
                case /* Street street */ 5:
                    message.street = Street.internalBinaryRead(reader, reader.uint32(), options, message.street);
                    break;
                case /* GameStatus game_status */ 6:
                    message.gameStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* CardPair cards = 2; */
        if (message.cards)
            CardPair.internalBinaryWrite(message.cards, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 next_player_id = 3; */
        if (message.nextPlayerId !== 0)
            writer.tag(3, WireType.Varint).int32(message.nextPlayerId);
        /* int32 lobby_id = 4; */
        if (message.lobbyId !== 0)
            writer.tag(4, WireType.Varint).int32(message.lobbyId);
        /* Street street = 5; */
        if (message.street)
            Street.internalBinaryWrite(message.street, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* GameStatus game_status = 6; */
        if (message.gameStatus !== 0)
            writer.tag(6, WireType.Varint).int32(message.gameStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ClientState
 */
export const ClientState = new ClientState$Type();

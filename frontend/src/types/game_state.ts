// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "game_state.proto" (package "game_state", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CardPair } from "./card";
import { Card } from "./card";
/**
 * @generated from protobuf message game_state.Street
 */
export interface Street {
    /**
     * @generated from protobuf field: game_state.StreetStatus street_status = 1;
     */
    streetStatus: StreetStatus;
    /**
     * @generated from protobuf field: repeated card.Card cards = 2;
     */
    cards: Card[];
}
/**
 * @generated from protobuf message game_state.Winner
 */
export interface Winner {
    /**
     * @generated from protobuf field: int32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: int32 win_amout = 2;
     */
    winAmout: number;
}
/**
 * @generated from protobuf message game_state.PlayerCards
 */
export interface PlayerCards {
    /**
     * @generated from protobuf field: int32 player_id = 1;
     */
    playerId: number;
    /**
     * @generated from protobuf field: card.CardPair cards = 2;
     */
    cards?: CardPair;
}
/**
 * @generated from protobuf message game_state.ShowdownOutcome
 */
export interface ShowdownOutcome {
    /**
     * @generated from protobuf field: game_state.Street streetHistory = 1;
     */
    streetHistory?: Street;
    /**
     * @generated from protobuf field: repeated game_state.Winner winners = 2;
     */
    winners: Winner[];
    /**
     * @generated from protobuf field: repeated game_state.PlayerCards players_cards = 3;
     */
    playersCards: PlayerCards[];
    /**
     * @generated from protobuf field: bool process_flop_automatically = 4;
     */
    processFlopAutomatically: boolean;
}
/**
 * @generated from protobuf enum game_state.StreetStatus
 */
export enum StreetStatus {
    /**
     * @generated from protobuf enum value: Preflop = 0;
     */
    Preflop = 0,
    /**
     * @generated from protobuf enum value: Flop = 1;
     */
    Flop = 1,
    /**
     * @generated from protobuf enum value: Turn = 2;
     */
    Turn = 2,
    /**
     * @generated from protobuf enum value: River = 3;
     */
    River = 3
}
/**
 * @generated from protobuf enum game_state.GameStatus
 */
export enum GameStatus {
    /**
     * @generated from protobuf enum value: Pause = 0;
     */
    Pause = 0,
    /**
     * @generated from protobuf enum value: None = 1;
     */
    None = 1,
    /**
     * @generated from protobuf enum value: Active = 2;
     */
    Active = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Street$Type extends MessageType<Street> {
    constructor() {
        super("game_state.Street", [
            { no: 1, name: "street_status", kind: "enum", T: () => ["game_state.StreetStatus", StreetStatus] },
            { no: 2, name: "cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Card }
        ]);
    }
    create(value?: PartialMessage<Street>): Street {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.streetStatus = 0;
        message.cards = [];
        if (value !== undefined)
            reflectionMergePartial<Street>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Street): Street {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game_state.StreetStatus street_status */ 1:
                    message.streetStatus = reader.int32();
                    break;
                case /* repeated card.Card cards */ 2:
                    message.cards.push(Card.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Street, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game_state.StreetStatus street_status = 1; */
        if (message.streetStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.streetStatus);
        /* repeated card.Card cards = 2; */
        for (let i = 0; i < message.cards.length; i++)
            Card.internalBinaryWrite(message.cards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game_state.Street
 */
export const Street = new Street$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Winner$Type extends MessageType<Winner> {
    constructor() {
        super("game_state.Winner", [
            { no: 1, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "win_amout", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Winner>): Winner {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerId = 0;
        message.winAmout = 0;
        if (value !== undefined)
            reflectionMergePartial<Winner>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Winner): Winner {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_id */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* int32 win_amout */ 2:
                    message.winAmout = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Winner, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* int32 win_amout = 2; */
        if (message.winAmout !== 0)
            writer.tag(2, WireType.Varint).int32(message.winAmout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game_state.Winner
 */
export const Winner = new Winner$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCards$Type extends MessageType<PlayerCards> {
    constructor() {
        super("game_state.PlayerCards", [
            { no: 1, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cards", kind: "message", T: () => CardPair }
        ]);
    }
    create(value?: PartialMessage<PlayerCards>): PlayerCards {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerId = 0;
        if (value !== undefined)
            reflectionMergePartial<PlayerCards>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCards): PlayerCards {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_id */ 1:
                    message.playerId = reader.int32();
                    break;
                case /* card.CardPair cards */ 2:
                    message.cards = CardPair.internalBinaryRead(reader, reader.uint32(), options, message.cards);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCards, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_id = 1; */
        if (message.playerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.playerId);
        /* card.CardPair cards = 2; */
        if (message.cards)
            CardPair.internalBinaryWrite(message.cards, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game_state.PlayerCards
 */
export const PlayerCards = new PlayerCards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowdownOutcome$Type extends MessageType<ShowdownOutcome> {
    constructor() {
        super("game_state.ShowdownOutcome", [
            { no: 1, name: "streetHistory", kind: "message", T: () => Street },
            { no: 2, name: "winners", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Winner },
            { no: 3, name: "players_cards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerCards },
            { no: 4, name: "process_flop_automatically", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ShowdownOutcome>): ShowdownOutcome {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.winners = [];
        message.playersCards = [];
        message.processFlopAutomatically = false;
        if (value !== undefined)
            reflectionMergePartial<ShowdownOutcome>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowdownOutcome): ShowdownOutcome {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* game_state.Street streetHistory */ 1:
                    message.streetHistory = Street.internalBinaryRead(reader, reader.uint32(), options, message.streetHistory);
                    break;
                case /* repeated game_state.Winner winners */ 2:
                    message.winners.push(Winner.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated game_state.PlayerCards players_cards */ 3:
                    message.playersCards.push(PlayerCards.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool process_flop_automatically */ 4:
                    message.processFlopAutomatically = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowdownOutcome, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* game_state.Street streetHistory = 1; */
        if (message.streetHistory)
            Street.internalBinaryWrite(message.streetHistory, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated game_state.Winner winners = 2; */
        for (let i = 0; i < message.winners.length; i++)
            Winner.internalBinaryWrite(message.winners[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated game_state.PlayerCards players_cards = 3; */
        for (let i = 0; i < message.playersCards.length; i++)
            PlayerCards.internalBinaryWrite(message.playersCards[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool process_flop_automatically = 4; */
        if (message.processFlopAutomatically !== false)
            writer.tag(4, WireType.Varint).bool(message.processFlopAutomatically);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message game_state.ShowdownOutcome
 */
export const ShowdownOutcome = new ShowdownOutcome$Type();

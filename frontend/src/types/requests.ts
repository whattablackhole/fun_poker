// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "requests.proto" (package "requests", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BotModel } from "./ai_bot_player";
import { Lobby } from "./lobby";
/**
 * @generated from protobuf message requests.JoinLobbyRequest
 */
export interface JoinLobbyRequest {
    /**
     * @generated from protobuf field: int32 lobby_id = 1;
     */
    lobbyId: number;
    /**
     * @generated from protobuf field: int32 player_id = 2;
     */
    playerId: number;
}
/**
 * @generated from protobuf message requests.StartGameRequest
 */
export interface StartGameRequest {
    /**
     * @generated from protobuf field: int32 lobby_id = 1;
     */
    lobbyId: number;
    /**
     * @generated from protobuf field: int32 player_id = 2;
     */
    playerId: number;
}
/**
 * @generated from protobuf message requests.ObserveLobbyRequest
 */
export interface ObserveLobbyRequest {
    /**
     * @generated from protobuf field: int32 player_id = 2;
     */
    playerId: number;
    /**
     * @generated from protobuf field: int32 lobby_id = 1;
     */
    lobbyId: number;
}
/**
 * @generated from protobuf message requests.CreateLobbyRequest
 */
export interface CreateLobbyRequest {
    /**
     * @generated from protobuf field: lobby.Lobby payload = 1;
     */
    payload?: Lobby;
}
/**
 * @generated from protobuf message requests.SpawnBotRequest
 */
export interface SpawnBotRequest {
    /**
     * @generated from protobuf field: int32 lobby_id = 1;
     */
    lobbyId: number;
    /**
     * @generated from protobuf field: ai_bot_player.BotModel model = 2;
     */
    model: BotModel;
}
// @generated message type with reflection information, may provide speed optimized methods
class JoinLobbyRequest$Type extends MessageType<JoinLobbyRequest> {
    constructor() {
        super("requests.JoinLobbyRequest", [
            { no: 1, name: "lobby_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<JoinLobbyRequest>): JoinLobbyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lobbyId = 0;
        message.playerId = 0;
        if (value !== undefined)
            reflectionMergePartial<JoinLobbyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinLobbyRequest): JoinLobbyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lobby_id */ 1:
                    message.lobbyId = reader.int32();
                    break;
                case /* int32 player_id */ 2:
                    message.playerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinLobbyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lobby_id = 1; */
        if (message.lobbyId !== 0)
            writer.tag(1, WireType.Varint).int32(message.lobbyId);
        /* int32 player_id = 2; */
        if (message.playerId !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message requests.JoinLobbyRequest
 */
export const JoinLobbyRequest = new JoinLobbyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartGameRequest$Type extends MessageType<StartGameRequest> {
    constructor() {
        super("requests.StartGameRequest", [
            { no: 1, name: "lobby_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StartGameRequest>): StartGameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lobbyId = 0;
        message.playerId = 0;
        if (value !== undefined)
            reflectionMergePartial<StartGameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartGameRequest): StartGameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lobby_id */ 1:
                    message.lobbyId = reader.int32();
                    break;
                case /* int32 player_id */ 2:
                    message.playerId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartGameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lobby_id = 1; */
        if (message.lobbyId !== 0)
            writer.tag(1, WireType.Varint).int32(message.lobbyId);
        /* int32 player_id = 2; */
        if (message.playerId !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message requests.StartGameRequest
 */
export const StartGameRequest = new StartGameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObserveLobbyRequest$Type extends MessageType<ObserveLobbyRequest> {
    constructor() {
        super("requests.ObserveLobbyRequest", [
            { no: 2, name: "player_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "lobby_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ObserveLobbyRequest>): ObserveLobbyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.playerId = 0;
        message.lobbyId = 0;
        if (value !== undefined)
            reflectionMergePartial<ObserveLobbyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObserveLobbyRequest): ObserveLobbyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 player_id */ 2:
                    message.playerId = reader.int32();
                    break;
                case /* int32 lobby_id */ 1:
                    message.lobbyId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObserveLobbyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 player_id = 2; */
        if (message.playerId !== 0)
            writer.tag(2, WireType.Varint).int32(message.playerId);
        /* int32 lobby_id = 1; */
        if (message.lobbyId !== 0)
            writer.tag(1, WireType.Varint).int32(message.lobbyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message requests.ObserveLobbyRequest
 */
export const ObserveLobbyRequest = new ObserveLobbyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateLobbyRequest$Type extends MessageType<CreateLobbyRequest> {
    constructor() {
        super("requests.CreateLobbyRequest", [
            { no: 1, name: "payload", kind: "message", T: () => Lobby }
        ]);
    }
    create(value?: PartialMessage<CreateLobbyRequest>): CreateLobbyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateLobbyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateLobbyRequest): CreateLobbyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* lobby.Lobby payload */ 1:
                    message.payload = Lobby.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateLobbyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* lobby.Lobby payload = 1; */
        if (message.payload)
            Lobby.internalBinaryWrite(message.payload, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message requests.CreateLobbyRequest
 */
export const CreateLobbyRequest = new CreateLobbyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpawnBotRequest$Type extends MessageType<SpawnBotRequest> {
    constructor() {
        super("requests.SpawnBotRequest", [
            { no: 1, name: "lobby_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "model", kind: "enum", T: () => ["ai_bot_player.BotModel", BotModel] }
        ]);
    }
    create(value?: PartialMessage<SpawnBotRequest>): SpawnBotRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lobbyId = 0;
        message.model = 0;
        if (value !== undefined)
            reflectionMergePartial<SpawnBotRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpawnBotRequest): SpawnBotRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lobby_id */ 1:
                    message.lobbyId = reader.int32();
                    break;
                case /* ai_bot_player.BotModel model */ 2:
                    message.model = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SpawnBotRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lobby_id = 1; */
        if (message.lobbyId !== 0)
            writer.tag(1, WireType.Varint).int32(message.lobbyId);
        /* ai_bot_player.BotModel model = 2; */
        if (message.model !== 0)
            writer.tag(2, WireType.Varint).int32(message.model);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message requests.SpawnBotRequest
 */
export const SpawnBotRequest = new SpawnBotRequest$Type();


worker_processes 1;
user root;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    lua_package_path "/usr/local/other/github/fun_poker/?.lua;;";
    lua_shared_dict game_servers 10m;

    init_worker_by_lua_block {
        local redis = require "resty.redis"
        local cjson = require "cjson"

        local function process_message(msg)
            local ok, data = pcall(cjson.decode, msg)
            if not ok then
                ngx.log(ngx.ERR, "failed to decode JSON: ", data)
                return
            end
            local gameID = data.game_id
            local serverAddress = data.server_address

            local dict = ngx.shared.game_servers
            local success, err, forcible = dict:set(gameID, serverAddress)
            if not success then
                ngx.log(ngx.ERR, "failed to set shared dict: ", err)
            elseif forcible then
                ngx.log(ngx.WARN, "shared dict entry overwritten")
            else
                ngx.log(ngx.INFO, "shared dict set: ", gameID, " -> ", serverAddress)
            end
        end

        local function redis_subscribe(premature)
            if premature then
                return
            end

            local red = redis:new()


            local ok, err = red:connect("127.0.0.1", 6379)
            if not ok then
                ngx.log(ngx.ERR, "failed to connect to Redis: ", err)
                return
            end

            local res, err = red:subscribe("game_servers")
            if not res then
                ngx.log(ngx.ERR, "failed to subscribe: ", err)
                return
            end

            ngx.log(ngx.INFO, "subscribed to Redis channel: game_servers")

            while true do
                local res, err = red:read_reply()
                if res then
                    process_message(res[3])
                elseif err == "timeout" then
                    ngx.log(ngx.ERR, "error reading reply: ", err)
                elseif err then
                    ngx.log(ngx.ERR, "error reading reply: ", err)
                end
            ngx.sleep(1)
            end
        end

        local ok, err = ngx.timer.at(0, redis_subscribe)
        if not ok then
            ngx.log(ngx.ERR, "failed to create timer: ", err)
        end
    }

    sendfile on;
    keepalive_timeout 65;

    server {
        listen 80;
        server_name localhost;


        location / {
            default_type 'text/html';
            content_by_lua_file /etc/openresty/hello.lua;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }

    }

    upstream backend {
        server 127.0.0.1:7878;
        server 127.0.0.1:7879;
    }

    server {
        listen 8080;

        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /join_lobby {
            set $game_server '';

            access_by_lua_block {
                local dict = ngx.shared.game_servers
                local args = ngx.req.get_uri_args()
                local lobby_id = args.lobby_id
                local server, err = dict:get(lobby_id)

                if not server then
                local request = require("request")
                local game_server, err = request.fetch_game_server(lobby_id)

                if game_server then
                    ngx.var.game_server = game_server
                else
                    ngx.log(ngx.ERR, "Failed to fetch game server: ", err)
                    ngx.exit(500)
                end
                    else
                        ngx.var.game_server = server
                end
            }
            proxy_pass http://$game_server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }
        location /ws {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }
    }
}